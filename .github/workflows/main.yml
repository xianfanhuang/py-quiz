name: Build Pyodide & Deploy to GitHub Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 拉取代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      # 使用官方Pyodide镜像（推荐方案）
      - name: 构建Pyodide（官方镜像）
        run: |
          # 创建输出目录
          mkdir -p dist/static/pyodide
          
          # 使用官方镜像构建
          docker run --rm \
            -v "$PWD":/work \
            -w /work \
            pyodide/pyodide:0.25.0 \
            pyodide build --output-dir ./dist/static/pyodide --meta-yaml-path ./pyodide_meta.yaml
          
          # 调试：显示生成的文件
          echo "构建产物列表:"
          find ./dist -type f | sort
          
          # 修复权限问题
          sudo chown -R $USER:$USER ./dist

      # 备选方案：手动构建（如果官方镜像不可用）
      - name: 构建Pyodide（手动）
        if: failure()  # 仅当官方镜像构建失败时执行
        run: |
          # 创建构建脚本
          cat > build.sh << 'EOL'
          #!/bin/bash
          set -ex
          
          # 设置非交互式环境
          export DEBIAN_FRONTEND=noninteractive
          export TZ=Asia/Shanghai
          
          # 安装依赖
          apt-get update
          apt-get install -y --no-install-recommends \
              software-properties-common \
              build-essential \
              cmake \
              nodejs \
              npm \
              git \
              curl \
              make \
              g++
          
          # 添加Python PPA
          add-apt-repository -y ppa:deadsnakes/ppa
          
          # 自动安装Python 3.11
          apt-get install -y --no-install-recommends \
              python3.11 \
              python3.11-dev \
              python3.11-venv \
              tzdata
          
          # 设置默认时区
          ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          dpkg-reconfigure --frontend noninteractive tzdata
          
          # 继续构建...
          python3.11 -m venv /venv
          source /venv/bin/activate
          pip install pyodide-build==0.25.0
          pyodide build --output-dir ./dist/static/pyodide --meta-yaml-path ./pyodide_meta.yaml
          chmod -R 777 ./dist
          EOL
          
          # 执行构建
          docker run --rm -v "$PWD":/work -w /work ubuntu:22.04 bash build.sh
          
          # 调试：显示生成的文件
          echo "构建产物列表:"
          find ./dist -type f | sort

      - name: 验证构建产物
        run: |
          # 检查dist目录是否存在
          if [ ! -d "dist" ]; then
            echo "❌ 错误：dist目录未生成"
            exit 1
          fi
          
          # 检查pyodide文件是否存在
          if [ ! -f "dist/static/pyodide/pyodide.js" ]; then
            echo "❌ 错误：pyodide.js未生成"
            echo "当前目录内容:"
            ls -laR dist
            exit 1
          fi
          
          echo "✅ 构建产物验证通过"

      - name: 部署到 GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          publish_branch: gh-pages
          force_orphan: true  # 确保只保留最新内容

permissions:
  contents: write
  pages: write

concurrency:
  group: github-pages
  cancel-in-progress: true
